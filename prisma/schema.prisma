generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------------
// User Table (NextAuth)
// -------------------------
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role          Role     @default(CUSTOMER)   // enum for stricter type safety
  customer      Customer? @relation(fields: [customerId], references: [id])
  customerId    String?   @db.ObjectId

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  deletedBy     String?  @db.ObjectId
}

// Role enum
enum Role {
  CUSTOMER
  ADMIN
  STAFF
}

// -------------------------
// Account Table (NextAuth)
// -------------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// -------------------------
// Session Table (NextAuth)
// -------------------------
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------
// VerificationToken Table (NextAuth)
// -------------------------
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------
// Customer Table
// -------------------------
model Customer {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  password      String?        // nullable for OAuth users
  isLoyal       Boolean        @default(false)
  profile       Profile?
  freeItems     FreeItem[]
  orders        Order[]
  reviews       Review[]
  notifications Notification[]

  users User[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  deletedBy     String?  @db.ObjectId
}

// -------------------------
// Profile Table (1:1)
// -------------------------
model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String   @unique @db.ObjectId
  phoneNumber String
  preferences String
  address     String

  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// -------------------------
// FreeItem Table
// -------------------------
model FreeItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  productId  String   @db.ObjectId
  dateIssued DateTime

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

// -------------------------
// Discount Table
// -------------------------
model Discount {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  description        String
  discountAmount     Int
  isForLoyalCustomer Boolean
}

// -------------------------
// Product Table
// -------------------------
model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  freeItems   FreeItem[]
  orderItems  OrderItem[]
  reviews     Review[]
}

// -------------------------
// Order Table
// -------------------------
model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String      @db.ObjectId
  orderDate       DateTime
  totalAmount     Int
  discountApplied Int?

  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
}

// -------------------------
// OrderItem Table
// -------------------------
model OrderItem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String   @db.ObjectId
  productId      String   @db.ObjectId
  quantity       Int
  priceAtPurchase Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

// -------------------------
// Review Table
// -------------------------
model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  productId  String   @db.ObjectId
  rating     Int
  comment    String

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

// -------------------------
// Notification Table
// -------------------------
model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId String   @db.ObjectId
  message    String
  dateSent   DateTime

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}
