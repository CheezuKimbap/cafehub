generator client {
  provider = "prisma-client-js"
  output = "./generated/prisma"
  binaryTargets = ["native", "windows", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------------
// User Table (NextAuth)
// -------------------------
model User {
  id            String      @id @default(uuid()) @map("_id")
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          Role        @default(CUSTOMER)
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  deletedBy     String?
}

enum Role {
  CUSTOMER
  ADMIN
  BARISTA
}

// -------------------------
// Account Table (NextAuth)
// -------------------------
model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// -------------------------
// Session Table (NextAuth)
// -------------------------
model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------
// VerificationToken Table (NextAuth)
// -------------------------
model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------
// Customer Table
// -------------------------
model Customer {
  id           String         @id @default(uuid()) @map("_id")
  firstName    String?
  lastName     String?
  email        String         @unique
  password     String?
  isLoyal      Boolean        @default(false)
  profile      Profile?
  freeItems    FreeItem[]
  orders       Order[]
  carts        Cart[] 
  reviews      Review[]
  notifications Notification[]

  users        User[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  deletedBy    String?
}

// -------------------------
// Profile Table (1:1)
// -------------------------
model Profile {
  id          String   @id @default(uuid()) @map("_id")
  customerId  String   @unique
  phoneNumber String
  preferences String
  address     String

  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// -------------------------
// FreeItem Table
// -------------------------
model FreeItem {
  id         String   @id @default(uuid()) @map("_id")
  customerId String
  productId  String
  dateIssued DateTime

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

// -------------------------
// Discount Table
// -------------------------
model Discount {
  id                 String   @id @default(uuid()) @map("_id")
  description        String
  discountAmount     Int
  isForLoyalCustomer Boolean  @default(false)
}

// -------------------------
// Product Table
// -------------------------
model Product {
  id          String        @id @default(uuid()) @map("_id")
  name        String
  image       String?
  description String
  isDeleted   Boolean       @default(false)
  price       Int
  stock       Int           @default(0) // ðŸ‘ˆ current stock level
  lowStock    Int           @default(5) // ðŸ‘ˆ threshold for low stock alerts
  freeItems   FreeItem[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  addons      ProductAddon[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  deletedBy   String?

  status      String        @default("AVAILABLE") // AVAILABLE, OUT_OF_STOCK, DISCONTINUED
}

// -------------------------
// Product Addons
// -------------------------
model ProductAddon {
  id          String   @id @default(uuid()) @map("_id")
  productId   String
  name        String
  price       Int

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// -------------------------
// Order Table
// -------------------------
model Order {
  id              String      @id @default(uuid()) @map("_id")
  customerId      String
  orderDate       DateTime
  totalAmount     Int
  discountApplied Int?
  isDeleted       Boolean     @default(false)
  deletedAt       DateTime?
  deletedBy       String?

  status          OrderStatus @default(PENDING)
  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  paymentStatus   PaymentStatus  @default(UNPAID) 
  paymentMethod   PaymentMethod?
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}
enum OrderStatus {
  PENDING
  PREPARING
  READYTOPICKUP  
  COMPLETED
  CANCELLED
}

enum ServingType {
  HOT
  COLD
}
// -------------------------
// OrderItem Table
// -------------------------
model OrderItem {
  id              String   @id @default(uuid()) @map("_id")
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Int
  isDeleted       Boolean  @default(false) 
  deletedAt       DateTime?
  deletedBy       String?
  servingType     ServingType
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

// -------------------------
// Cart Table
// -------------------------
model Cart {
  id         String      @id @default(uuid()) @map("_id")
  customerId String @unique
  items      CartItem[]
  status     CartStatus  @default(ACTIVE)   // ACTIVE, CHECKED_OUT, ABANDONED
  isDeleted  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  deletedBy  String?

  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

enum CartStatus {
  ACTIVE
  CHECKED_OUT
  ABANDONED
}

// -------------------------
// CartItem Table
// -------------------------
model CartItem {
  id         String   @id @default(uuid()) @map("_id")
  cartId     String
  productId  String
  quantity   Int      @default(1)
  price      Int      // price at the time of adding to cart
  isDeleted  Boolean  @default(false)
  addedAt    DateTime @default(now())
  servingType     ServingType
  deletedAt  DateTime?
  deletedBy  String?

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

// -------------------------
// PaymentMethod Table
// -------------------------
model PaymentMethod {
  id        String   @id @default(uuid()) @map("_id")
  orderId   String @unique
  type      String   // e.g., CREDIT_CARD, PAYPAL, GCASH
  provider  String?  // e.g., Visa, Mastercard
  details   String?  // e.g., masked card number or transaction reference
  status    String   // e.g., PENDING, SUCCESS, FAILED
  paidAt    DateTime?
  deletedAt DateTime?
  deletedBy String?

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// -------------------------
// Review Table
// -------------------------
model Review {
  id         String   @id @default(uuid()) @map("_id")
  customerId String
  productId  String
  rating     Int
  comment    String

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

// -------------------------
// Notification Table
// -------------------------
model Notification {
  id         String   @id @default(uuid()) @map("_id")
  customerId String
  message    String
  dateSent   DateTime

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}
